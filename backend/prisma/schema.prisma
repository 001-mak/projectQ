generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int       @id @unique @default(autoincrement())
  role  String    @unique
  users appUser[]
}

model appUser {
  id                 Int       @id @unique @default(autoincrement())
  firstName          String
  lastName           String
  username           String    @unique
  email              String    @unique
  password           String
  roleId             Int
  roleRef            Role      @relation(fields: [roleId], references: [id])
  emailVerified      Boolean   @default(false)
  verificationToken  String?
  resetPasswordToken String?
  isAdmin            Boolean   @default(false)
  isBlocked          Boolean   @default(false)
  userType           String
  createdOn          DateTime? @default(now())
  updatedOn          DateTime?
  createdBy          String?
  updatedBy          String?
  Profile            Profile?
}

model Permissions {
  id             Int    @id @unique @default(autoincrement())
  permissionName String
  description    String
}

model Profile {
  id              Int               @id @unique @default(autoincrement())
  userId          Int               @unique
  userRef         appUser           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  avatar          String?
  tagLine         String?
  about           String?
  country         String
  city            String?
  language        String?
  isComplete      Boolean           @default(false)
  createdOn       DateTime?         @default(now())
  profilePlatform profilePlatform[]
  package         Package[]
  profileCategory profileCategory[]
}

model Category {
  id              Int               @id @unique @default(autoincrement())
  catName         String            @unique
  profileCategory profileCategory[]
}

model profileCategory {
  id         Int      @id @unique @default(autoincrement())
  catId      Int
  catRef     Category @relation(fields: [catId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId  Int
  profileRef Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model profilePlatform {
  id           Int     @id @unique @default(autoincrement())
  platformName String
  profileLink  String
  profileId    Int
  profileRef   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Package {
  id           Int     @id @unique @default(autoincrement())
  pkgTitle     String
  pkgPrice     Int
  platformName String
  profileId    Int
  profileRef   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
